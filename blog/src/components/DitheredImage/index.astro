---
import { Image } from "astro:assets";
import { processDitheredImage } from "./utils";

// TODO: we should write out the image to a file and then reload it
// both for build caching and so we can use assets image optimizer

// TODO: add a global flag for invalidating cache

type Props = {
  imagePath: string;
  dither?: boolean;
  caption?: string;
  altText: string;
};

// TODO:
// we should also allow preprocessing in a prebuild script
// it'd be nice because then we can store metadata about the files and not have to pass it via
// url

const { imagePath, dither = true, caption, altText } = Astro.props;

// const existingImage = await readImage();

console.log("HERE!");
const ditheredImage = await processDitheredImage(imagePath);
console.log("HERE2!");
const basename = imagePath;

const images = import.meta.glob("/src/assets/*.{jpeg,jpg,png,gif}");

console.log("IMAGES: ", images);
// console.log("Data URL: ", ditheredImage);
console.log("THing ", images[ditheredImage]);
---

<a href=`/file/${basename}` class="block text-center">
  <!-- @ts-expect-error -->
  <Image src={images[ditheredImage]()} alt={altText} />
  {caption && <span class="block text-center mt-2">{caption}</span>}
</a>
