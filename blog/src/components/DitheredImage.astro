---
import { Image } from 'astro:assets';
import { readFileSync } from 'fs';
// @ts-expect-error no types :(
import RgbQuant from 'rgbquant';
import { readFile } from 'fs/promises';
import { createCanvas, loadImage } from 'canvas';
import t from "../assets/testImage.jpeg";

type Props = {
    imagePath : string,
    dither?: boolean,
    caption?: string,
    altText: string,
};

const {imagePath, dither = true, caption, altText} = Astro.props;
function typeOf(val : any) {
		return Object.prototype.toString.call(val).slice(8,-1);
	}

// Function to process the image
async function processImage() {
	const data = await readFile(imagePath);
    console.log("data: ", data);
	const img = await loadImage(data);
    console.log("image: ", img);

    console.log("typeof 2 : ", typeOf(img));
	const can = createCanvas(img.width, img.height);
    console.log("can: ", can);
    console.log("typeof 1 : ", typeOf(can));
	const ctx = can.getContext('2d');
    console.log("WIDTH : ", img.width);
    console.log("Height : ", img.height);
	ctx.drawImage(img, 0, 0, img.width, img.height);
    const imgd = ctx.getImageData(0, 0, img.width, img.height);

	const q = new RgbQuant({
        // colors: 256,
        palette: [
            [0,0,0],
            [255,255,0],
            [0,255,255],
            [255,0,255],
            [255,255,255],
        ],
        reIndex: true,
    });
	// q.sample(imgd.data, img.width);
	// const pal = q.palette(true);
	// const out = q.reduce(imgd.data, 1, "FloydSteinberg");
	const out = q.reduce(imgd.data, 1, "FloydSteinberg");

	// You might want to do something with 'out' here, e.g., render it
	return {out, width: img.width, height: img.height};
}

// You can call 'processImage' here to have the processed image ready for rendering
const { out, width, height } = await processImage();

const canvas = createCanvas(width, height);
const ctx = canvas.getContext('2d');
console.log('out:', out);
console.log('width:', width);
console.log('height:', height);
console.log('ctx:', ctx);

// Create an ImageData object from the Uint8Array
// const imageData = new ImageData(new Uint8ClampedArray(out), width, height);
// console.log("Image data: ", imageData);
const imageData = await ctx.createImageData(width, height);
imageData.data.set(new Uint8ClampedArray(out));
ctx.putImageData(imageData, 0, 0);

// Put the ImageData object into the canvas
// await ctx.putImageData(imageData, 0, 0);

// Convert the canvas to a data URL
const dataUrl = canvas.toDataURL();
---



<img src={dataUrl} alt={altText} />